using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using uPLibrary.Networking.M2Mqtt;
using uPLibrary.Networking.M2Mqtt.Messages;
using uPLibrary.Networking.M2Mqtt.Utility;
using uPLibrary.Networking.M2Mqtt.Exceptions;

public class MqttController : MonoBehaviour {

    [Header("MQTT broker configuration")]
    [Tooltip("IP addres or URL of host running the broker")]
    public string brokerAddress = "mqtt.thorman.eu";
    [Tooltip("Port where the broker accepts connections")]
    public int brokerPort = 1883;
    [Tooltip("Use encrypted connection")]
    public bool isEncrypted = false;
    [Tooltip("The username to access the MQTT srv")]
    public string username = null;
    [Tooltip("The password to access the MQTT srv")]
    public string password = null;
    [Tooltip("Use Broadcast to find the MQTT srv (Compared to directly using the given address:port above)")]
    public bool isUsingBroadcast = true;

    [Header("MQTT client configuration")]
    [Tooltip("The client id for this client, if not set, this will be autogenerated")]
    public string clientId = "poseclient-" + Guid.NewGuid().ToString();

    [Header("Pose controller")]
    [Tooltip("The controller doing something usefull with the input")]
//    public List<PoseEventHandler> poseEventHandlers;
    public PoseEventHandler poseEventHandler;

    private PoseClient.MqttPoseProxy mqttPoseProxy;

    public void Awake()
    {
        Debug.Log("MqttPoseProxy::Awake");
        DontDestroyOnLoad(this.gameObject);
        mqttPoseProxy = PoseClient.MqttPoseProxy.getProxyObject();
        mqttPoseProxy.brokerAddress = brokerAddress;
        mqttPoseProxy.brokerPort = brokerPort;
        mqttPoseProxy.isUsingBroadcast = isUsingBroadcast;
    }

    void Update()
    {
//        Debug.Log("MqttPoseProxy::Update");
    }

    void Start()
    {
        Debug.Log("MqttPoseProxy::Start");
        mqttPoseProxy.Initialize(poseEventHandler);
    }

    void OnDestroy()
    {
        mqttPoseProxy.cleanupResources();
    }
}
